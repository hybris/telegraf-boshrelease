#! /usr/bin/env bash
set -e
#set -x
#export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# chkconfig: 2345 99 01
# description: Telegraf daemon

### BEGIN INIT INFO
# Provides:          telegraf
# Required-Start:    $all
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start telegraf at boot time
### END INIT INFO

# this init script supports three different variations:
#  1. New lsb that define start-stop-daemon
#  2. Old lsb that don't have start-stop-daemon but define, log, pidofproc and killproc
#  3. Centos installations without lsb-core installed
#
# In the third case we have to define our own functions which are very dumb
# and expect the args to be positioned correctly.

# Command-line options that can be set in /etc/default/telegraf.  These will override
# any config file values.
TELEGRAF_OPTS=

JOB_NAME=<%= spec.name %>
PACKAGE_NAME=telegraf
# Process name ( For display )
NAME=${PACKAGE_NAME}

RUN_DIR=/var/vcap/sys/run/${PACKAGE_NAME}
LOG_DIR=/var/vcap/sys/log/${PACKAGE_NAME}
mkdir -p ${RUN_DIR} ${LOG_DIR}
chown -R vcap:vcap ${RUN_DIR} ${LOG_DIR}
exec 1>> ${LOG_DIR}/telegraf.stdout.log
exec 2>> ${LOG_DIR}/telegraf.stderr.log

PIDFILE=$RUN_DIR/telegraf.pid

USER=vcap
GROUP=vcap

# Daemon name, where is the actual executable
# If the daemon is not there, then exit.
DAEMON=/var/vcap/packages/${PACKAGE_NAME}/usr/bin/telegraf
[ -x $DAEMON ] || exit 5

# Configuration file
CONFIG=/var/vcap/jobs/${PACKAGE_NAME}/config/telegraf.conf

if [ -r /lib/lsb/init-functions ]; then
    source /lib/lsb/init-functions
fi

OPEN_FILE_LIMIT=65536

function pidofproc() {
    if [ $# -ne 3 ]; then
        echo "Expected three arguments, e.g. $0 -p pidfile daemon-name"
    fi

    if [ ! -f "$2" ]; then
        return 1
    fi

    local PIDFILE=`cat $2`

    if [ "x$PIDFILE" == "x" ]; then
        return 1
    fi

    if ps --pid "$PIDFILE" | grep -q $(basename $3); then
        return 0
    fi

    return 1
}

function killproc() {
    if [ $# -ne 3 ]; then
        echo "Expected three arguments, e.g. $0 -p pidfile signal"
    fi

    pid=`cat $2`

    kill -s $3 $pid
}

function log_failure_msg() {
    echo "$@" "[ FAILED ]"
}

function log_success_msg() {
    echo "$@" "[ OK ]"
}

case $1 in
  start)
    # Check if config file exist
    if [ ! -r $CONFIG ]; then
        log_failure_msg "config file doesn't exist (or you don't have permission to view)"
        exit 4
    fi

    # Bump the file limits, before launching the daemon. These will carry over to launched processes.
    ulimit -n $OPEN_FILE_LIMIT
    if [ $? -ne 0 ]; then
        log_failure_msg "set open file limit to $OPEN_FILE_LIMIT"
    fi

    # Checked the PID file exists and check the actual status of process
    if [ -e $PIDFILE ]; then
     status_of_proc -p $PIDFILE $DAEMON "$NAME process" && status="0" || status="$?"
     # If the status is SUCCESS then don't need to start again.
     if [ $status = "0" ]; then
       log_success_msg "$NAME process was already running"
      exit # Exit
     fi
    fi
    # Start the daemon.
    log_daemon_msg "Starting the process" "$NAME"
    # Start the daemon with the help of start-stop-daemon
    log_success_msg "Starting the process" "$NAME"
    # Log the message appropriately
    if `start-stop-daemon --chuid $GROUP:$USER --start --quiet --oknodo --pidfile $PIDFILE --exec $DAEMON -- -pidfile $PIDFILE -config $CONFIG $TELEGRAF_OPTS &`; then
     log_end_msg 0
     log_success_msg "$NAME process was started"
    else
     log_end_msg 1
     log_failure_msg "$NAME process did not started"

    fi
  ;;

  stop)
    # Stop the daemon.
    if [ -e $PIDFILE ]; then
     status_of_proc -p $PIDFILE $DAEMON "$NAME process" && status="0" || status="$?"
     if [ "$status" = 0 ]; then
      start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE
      /bin/rm -rf $PIDFILE
      log_success_msg "$NAME process was stopped"
     fi
    else
     log_daemon_msg "$NAME process is not running"
     log_end_msg 0
     log_failure_msg "$NAME process is not running"
    fi
    ;;

  reload)
    # Reload the process. Basically sending some signal to a daemon to reload
    # it configurations.
    if [ -e $PIDFILE ]; then
      start-stop-daemon --stop --signal USR1 --quiet --pidfile $PIDFILE --name $NAME
      log_success_msg "$NAME process reloaded successfully"
      log_success_msg "$name process was reloaded"
    else
      log_failure_msg "$PIDFILE does not exists"
      log_failure_msg "$name process is not running"
    fi
  ;;

  restart)
    # Restart the daemon.
    $0 stop && sleep 2 && $0 start
    ;;

  status)
    # Check the status of the process.
    if [ -e $PIDFILE ]; then
     status_of_proc -p $PIDFILE $DAEMON "$NAME process" && exit 0 || exit $?
    else
     log_daemon_msg "$NAME Process is not running"
     log_end_msg 0
    fi
  ;;

  version)
      $DAEMON version
      ;;

  *)
      # For invalid arguments, print the usage message.
      echo "Usage: $0 {start|stop|restart|status|version}"
      exit 2
      ;;
esac
